{"name":"Tracebox","tagline":"A Middlebox Detection Tool","body":"### Tracebox\r\n\r\nMiddleboxes are widely deployed on the Internet mostly at the edge of the\r\nnetwork, in enterprise and home networks. Middleboxes plays therefore an\r\nimportant role -- even if they are often criticized -- in today's Internet.\r\nUnfortunately, the widespread of middlebox contributed to the ossification of\r\nthe Internet making it very difficult to innovate. As an example, Multipath\r\nTCP, a recent extension to TCP, includes a complex mechanism which\r\nconstitute the major part of the protocol to deal with those middleboxes.\r\n\r\nMiddleboxes manipulates traffic for purposes other than simple packet\r\nforwarding and often transparently to the end-user (e.g. NAT, transparent\r\nproxies, DPI, etc.). Detecting such middleboxes is difficult today. \r\n\r\nTracebox is a tool that allows to detect middleboxes on\r\nany paths, i.e., between a source and any destination. Tracebox can be viewed\r\nas a tool similar to traceroute as it uses ICMP replies to identify changes in\r\nthe packets. The fact that tracebox is able to detect middleboxes comes from\r\nthe observation that ICMP messages are often not as defined in\r\nRFC792. Indeed it is quite common to receive a ICMP\r\nTime-to-Live exceeded message with the original datagram instead of 64\r\nbits as described in the standard. This is caused by operating systems\r\nconfigured to reply with full ICMP (e.g., Linux, Cisco IOS-XR, etc.) as well as\r\nthe ICMP Multi-Part Messages extension that standardize the fact\r\nthat routers using MPLS tunnels replies and ICMP message containing the full\r\ndatagram.\r\n\r\nThe tool is presented in the following paper:\r\nGregory Detal, Benjamin Hesmans, Olivier Bonaventure, Yves Vanaubel and Benoit Donnet. _[Revealing Middlebox Interference with Tracebox](http://inl.info.ucl.ac.be/publications/revealing-middlebox-interference-tracebox)_. In Proceedings of the 2013 ACM SIGCOMM conference on Internet measurement conference, October 2013.\r\n\r\n### Install\r\n\r\nTracebox is available on Mac OS X using [Homebrew](http://brew.sh) with ```brew install tracebox```.\r\n\r\nSource can be found at http://www.github.com/tracebox/tracebox.\r\n\r\nTracebox requires:\r\n\r\n  - The development package of libpcap, (lib)lua >= 5.1.\r\n  - Automake, autoconf and libtool.\r\n\r\nTo build Tracebox:\r\n\r\n```\r\n$ ./bootstrap.sh\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n### Usage\r\n\r\nThere are two possible ways to use tracebox either with the python scripts (see some samples scripts in  <docdir>/tracebox/examples) or with the default binary. The later only send one TCP probe and look for changes in the path. The following example sends a TCP SYN probe (to port 80 by default) with the TCP Maximum Segment Size, Multipath TCP and Window Scale options. The output shows that a middlebox close to the server removes the last two options and change the MSS value.\r\n\r\n```\r\n# tracebox -n -p IP/TCP/MSS/MPCAPABLE/WSCALE bahn.de\r\ntracebox to 81.200.198.6 (bahn.de): 64 hops max\r\n1: 130.104.228.126 IP::CheckSum \r\n2: 130.104.254.229 IP::TTL IP::CheckSum \r\n3: 193.191.3.85 IP::TTL IP::CheckSum \r\n4: 193.191.16.21 IP::TTL IP::CheckSum \r\n5: 195.69.144.123 IP::TTL IP::CheckSum \r\n6: 145.254.5.158 IP::TTL IP::CheckSum \r\n7: 88.79.13.62 IP::TTL IP::CheckSum \r\n8: 81.200.194.234 IP::TTL IP::CheckSum \r\n9: 81.200.197.9 IP::TTL IP::CheckSum \r\n10: 81.200.198.6 TCP::CheckSum IP::TTL IP::CheckSum TCPOptionMaxSegSize::MaxSegSize -TCPOptionMPTCPCapable -TCPOptionWindowScale\r\n```\r\n\r\nLua API documentation can be found at http://tracebox.org/lua_doc.\r\n\r\n### Support or Contact\r\n\r\nFeedback or comments are welcome @gdetal\r\n\r\n### Acknowledgment\r\nThis work has been partially funded by the FP7 EU project [CHANGE](http://www.change-project.eu/) and [mPlane](http://www.ict-mplane.eu/).","google":"UA-40269957-1","note":"Don't delete this file! It's used internally to help with page regeneration."}