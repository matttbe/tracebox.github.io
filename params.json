{"name":"Tracebox","tagline":"A Middlebox Detection Tool","body":"### Tracebox\r\n\r\nMiddleboxes are widely deployed on the Internet mostly at the edge of the\r\nnetwork, in enterprise and home networks. Middleboxes plays therefore an\r\nimportant role -- even if they are often criticized -- in today's Internet.\r\nUnfortunately, the widespread of middlebox contributed to the ossification of\r\nthe Internet making it very difficult to innovate. As an example, Multipath\r\nTCP, a recent extension to TCP, includes a complex mechanism which\r\nconstitute the major part of the protocol to deal with those middleboxes.\r\n\r\nMiddleboxes manipulates traffic for purposes other than simple packet\r\nforwarding and often transparently to the end-user (e.g. NAT, transparent\r\nproxies, DPI, etc.). Detecting such middleboxes is difficult today. \r\n\r\nTracebox a tool that allows to detect middleboxes on\r\nany paths, i.e., between a source and any destination. Tracebox can be viewed\r\nas a tool similar to traceroute as it uses ICMP replies to identify changes in\r\nthe packets. The fact that tracebox is able to detect middleboxes comes from\r\nthe observation that ICMP messages are often not as defined in\r\nRFC792. Indeed it is quite common to receive a ICMP\r\nTime-to-Live exceeded message with the original datagram instead of 64\r\nbits as described in the standard. This is caused by operating systems\r\nconfigured to reply with full ICMP (e.g., Linux, Cisco IOS-XR, etc.) as well as\r\nthe ICMP Multi-Part Messages extension that standardize the fact\r\nthat routers using MPLS tunnels replies and ICMP message containing the full\r\ndatagram.\r\n\r\n### Install\r\n\r\nSource can be found http://www.github.com/gdetal/tracebox.\r\n\r\nTracebox requires:\r\n\r\n  - The development package of libpcap, libdnet and python.\r\n  - Automake, autoconf and libtool.\r\n  - Python packages: argparse (for python < 2.7), pcapy and scapy.\r\n\r\nTo build Tracebox:\r\n\r\n```\r\n$ ./bootstrap.sh\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\nAdditionally python wrapper can be disabled with: --disable-wrappers\r\n\r\n### Usage\r\n\r\nThere are two possible ways to use tracebox either with the python scripts (see some samples scripts in  <docdir>/tracebox/examples) or with the default binary. The later only send one TCP probe and look for changes in the path. The following example shows that the first router on the path changes the TCP sequence number:\r\n\r\n```\r\n$ sudo tracebox -i en0 87.98.252.243\r\ntracebox to 87.98.252.243 (87.98.252.243): 30 hops max\r\n 1: 130.104.228.126 (130.104.228.126) [TCP seq changed] \r\n 2: ctpythagore.sri.ucl.ac.be (130.104.254.229) \r\n 3: ge.cr2.brueve.belnet.net (193.191.3.85) \r\n 4: ovh.bnix.net (194.53.172.70) \r\n 5: rbx-g1-a9.fr.eu (213.251.130.61) \r\n 6: vss-4-6k.fr.eu (94.23.122.160) \r\n 7: 87-98-252-243.kimsufi.com (87.98.252.243) \r\n```\r\n\r\n### Support or Contact\r\n\r\nFeedback or comments are welcome @gdetal\r\n\r\n### Acknowledgment\r\nThis work has been partially funded by the FP7 EU project [CHANGE](http://www.change-project.eu/) and [mPlane](http://www.ict-mplane.eu/).","google":"UA-40269957-1","note":"Don't delete this file! It's used internally to help with page regeneration."}